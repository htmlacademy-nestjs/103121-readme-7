// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  video
  text
  quote
  photo
  link
}

enum PostStatusType {
  draft
  published
}

model Post {
  id             String         @id @default(uuid())
  title          String?
  video          String?
  preview        String?
  text           String?
  quoteText      String?        @map("quote_text")
  quoteAuthor    String?        @map("quote_author")
  photo          String?
  link           String?
  description    String?
  tags           String[]
  type           PostType
  status         PostStatusType @default(published)
  createdAt      DateTime       @default(now()) @map("created_at")
  publicatedAt   DateTime       @default(now()) @map("publicated_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  userId         String         @map("user_id")
  comments       Comment[]
  likes          Like[]
  isReposted     Boolean?       @default(false) @map("is_repost")
  originalId     String?        @map("original_id")
  originalUserId String?        @map("original_user_id")

  @@map("posts")
}

model Comment {
  id           String         @id @default(uuid())
  message      String
  userId       String         @map("user_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId       String         @map("post_id")

  @@map("comments")
}

model Like {
  id           String         @id @default(uuid())
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId       String         @map("post_id")
  userId       String         @map("user_id")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  @@map("likes")
}
